true_props <- as.numeric(rownames(estimable_prop_slope_sub))
estimable_prop_slope[,1]/true_props
plot(as.numeric(rownames(estimable_prop_slope)),
estimable_prop_slope[,1]/true_props -1,
col=2,pch=18,xlab="",ylab="")
ncol(estimable_prop_slope_sub)
plot(as.numeric(rownames(estimable_prop_slope)),
estimable_prop_slope[,1]/true_props -1,
col=2,pch=18,xlab="",ylab="")
for(i in 2:ncol(estimable_prop_slope_sub))
{
plot(as.numeric(rownames(estimable_prop_slope)),
estimable_prop_slope[,i]/true_props - 1,
col=i+1, pch=18, xlab="", ylab="")
}
plot(as.numeric(rownames(estimable_prop_slope)),
estimable_prop_slope[,1]/true_props -1,
col=2,pch=18,xlab="",ylab="")
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope)),
estimable_prop_slope[,i]/true_props - 1,
col=i+1, pch=18, xlab="", ylab="")
}
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props -1,
col=2,pch=18,xlab="",ylab="")
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props - 1,
col=i+1, pch=18, xlab="", ylab="")
}
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props -1,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(-1,0))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props - 1,
col=i+1, pch=18, xlab="", ylab="")
}
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(-1,0))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
legend("topleft",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
title(main = "ff")
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = "ff")
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
title(main = paste("% of the proportion estimable", expression(alpha), "= 1"))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = paste("% of the proportion estimable", expression(alpha), "= 1"))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = paste("% of the proportion estimable", expression(alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = paste("% of the proportion estimable", expression(alpha)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable", alpha)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable ", alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_sqrt_sub <-  select(estimable_prop_sqrt, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_sqrt_sub))
plot(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_sqrt_sub))
{
points(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable, ", alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(tilde(t))-pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable, ", alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_slope_sub <-  select(estimable_prop_slope, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_slope_sub))
plot(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_slope_sub))
{
points(as.numeric(rownames(estimable_prop_slope_sub)),
estimable_prop_slope_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(pi)[1]/pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable, ", alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_sqrt_sub <-  select(estimable_prop_sqrt, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_sqrt_sub))
plot(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_sqrt_sub))
{
points(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(pi)[1]/pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable, ", alpha == 1)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
estimable_prop_sqrt_sub <-  select(estimable_prop_sqrt, "2","3","4","5")
true_props <- as.numeric(rownames(estimable_prop_sqrt_sub))
plot(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,1]/true_props,
col = 2, pch= 18, xlab = "", ylab = "", ylim = c(0,1))
for(i in 2:ncol(estimable_prop_sqrt_sub))
{
points(as.numeric(rownames(estimable_prop_sqrt_sub)),
estimable_prop_sqrt_sub[,i]/true_props,
col=i+1, pch=18, xlab="", ylab="")
}
title(ylab=expression(tilde(pi)[1]/pi[1]), line=2.5, cex.lab=1.2)
title(xlab=expression(pi[1]), line=2.5, cex.lab=1.2)
title(main = expression(paste("% of the proportion estimable, ", alpha == 1/2)))
legend("bottomright",
legend = c(expression(mu==2), expression(mu==3),expression(mu==4), expression(mu==5)),
col = 2:5,
#lty=c(1,4),
pch = 18,
bty = "n",
pt.cex = 1,
cex = 1,
text.col = "black",
horiz = F ,
inset = c(0.01, 0.01))
for (i in 1:length(chr_no)) {
ord_pseq <- order(p_seq[[i]])
col <- an_list[[i]]
col <- car::recode(col, "0='lightgrey'; 1 = 'red3'")
plot(p_seq[[i]][ord_pseq], col =  col[ord_pseq], lwd = 2, ylab = "", main = paste("Chromosome", chr_no[i]), type = "h")
}
data(neuroblastoma)
nb_data <- neuroblastoma$profiles
nb_an <- neuroblastoma$annotations
chr_no <- c(1, 2, 3, 4, 11, 17)
chr_an <- vector("list", length(chr_no))
s <- vector("list", length(chr_no))
e <- vector("list", length(chr_no))
chr_data <- vector("list", length(chr_no))
profiles_chr <- vector("list", length(chr_no))
for (i in 1:length(chr_no)) {
temp_an <- filter(nb_an, chromosome == chr_no[i]) %>%
arrange(profile.id)
s[[i]] <- temp_an$min[1]
e[[i]] <- temp_an$max[1]
temp_an <- select(temp_an, -(chromosome:max))
chr_an[[i]] <- temp_an
temp_data <- filter(nb_data, chromosome == chr_no[i]) %>%
arrange(profile.id) %>%
select(-chromosome)
chr_data[[i]] <- temp_data
profiles_chr[[i]] <- unique(temp_an$profile.id)
}
library(neuroblastoma)
data(neuroblastoma)
nb_data <- neuroblastoma$profiles
nb_an <- neuroblastoma$annotations
chr_no <- c(1, 2, 3, 4, 11, 17)
chr_an <- vector("list", length(chr_no))
s <- vector("list", length(chr_no))
e <- vector("list", length(chr_no))
chr_data <- vector("list", length(chr_no))
profiles_chr <- vector("list", length(chr_no))
for (i in 1:length(chr_no)) {
temp_an <- filter(nb_an, chromosome == chr_no[i]) %>%
arrange(profile.id)
s[[i]] <- temp_an$min[1]
e[[i]] <- temp_an$max[1]
temp_an <- select(temp_an, -(chromosome:max))
chr_an[[i]] <- temp_an
temp_data <- filter(nb_data, chromosome == chr_no[i]) %>%
arrange(profile.id) %>%
select(-chromosome)
chr_data[[i]] <- temp_data
profiles_chr[[i]] <- unique(temp_an$profile.id)
}
chr_no <- c(1, 2, 3, 4, 11, 17)
i <- 1
j <- 7
chr_an[[i]][j,] # annotation for the given profile
dat <- chr_data[[i]] %>%
filter(profile.id == profiles_chr[[i]][j]) %>%
filter(position >= s[[i]] & position <= e[[i]])
dat %>%
with(plot(logratio))
an_list <- vector("list", length(chr_no))
for (i in 1:length(chr_no)) {
an_list[[i]] <- chr_an[[i]] %>%
select(annotation) %>%
mutate(annotation = recode(annotation, 'breakpoint' = 1, 'normal' = 0)) %>%
unlist() %>%
as.numeric()
}
K <- 1
h <- 5
q <- 0.025
p_seq <- vector("list", length(chr_no))
pb <- txtProgressBar(max = length(chr_no))
for (i in 1:length(chr_no)) {
for (j in 1:length(profiles_chr[[i]])) {
dat <- chr_data[[i]] %>%
filter(profile.id == profiles_chr[[i]][j]) %>%
filter(position >= s[[i]] & position <= e[[i]])
dat_seq <- dat$logratio
dat_seq <- dat_seq[dat_seq > quantile(dat_seq, q) &
dat_seq < quantile(dat_seq, 1 - q)]
fit_inference <- changepoint_inference(dat_seq, 'BS-fixed', K, window_size = h)
p_seq[[i]][j] <- fit_inference$pvals
}
setTxtProgressBar(pb, i)
}
library(ChangepointInference)
K <- 1
h <- 5
q <- 0.025
p_seq <- vector("list", length(chr_no))
pb <- txtProgressBar(max = length(chr_no))
for (i in 1:length(chr_no)) {
for (j in 1:length(profiles_chr[[i]])) {
dat <- chr_data[[i]] %>%
filter(profile.id == profiles_chr[[i]][j]) %>%
filter(position >= s[[i]] & position <= e[[i]])
dat_seq <- dat$logratio
dat_seq <- dat_seq[dat_seq > quantile(dat_seq, q) &
dat_seq < quantile(dat_seq, 1 - q)]
fit_inference <- changepoint_inference(dat_seq, 'BS-fixed', K, window_size = h)
p_seq[[i]][j] <- fit_inference$pvals
}
setTxtProgressBar(pb, i)
}
close(pb)
load(CP_loc_alpha05)
load("CP_loc_alpha05")
load(ChangepointLocationSqrt.RData
)
load(ChangepointLocationSqrt.RData)
load("/Users/anicakostic/R packages/MTCP/data/ChangepointLocationSqrt.RData")
head(CP_loc_alpha05)
load(ChangepointLocationSqrt.RData)
load("ChangepointLocationSqrt.RData")
load("CP_loc_alpha05.RData")
load(CP_loc_alpha05)
#load("/Users/anicakostic/R packages/MTCP/data/ChangepointLocationSqrt.RData")
head(CP_loc_alpha05)
#load("/Users/anicakostic/R packages/MTCP/data/EstimableProportionSqrt.RData")
head(estimable_prop_sqrt)
#load("/Users/anicakostic/R packages/MTCP/data/EstimableProportionSlope.RData")
head(estimable_prop_slope)
View(nrblstm)
del(neuroblastoma)
install.packages("changepoint")
