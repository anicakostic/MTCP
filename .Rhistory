power_med[i] <- abh_med$power
abh_lsl <- bh_adaptive(p_seq, pi0est_lsl[i], alpha, sig)
fdr_lsl[i] <- abh_lsl$fdr
power_lsl[i] <- abh_lsl$power
}
arr["pi0est", "DOS-1", toString(rho[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(rho[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(rho[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(rho[j])] <- pi0
arr["pi0est", "ST-1/2", toString(rho[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(rho[j])] <- mean(pi0est_med)
arr["pi0est", "LSL", toString(rho[j])] <- mean(pi0est_lsl)
arr["FDR", "DOS-1", toString(rho[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(rho[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(rho[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(rho[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(rho[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(rho[j])] <- mean(fdr_med)
arr["FDR", "LSL", toString(rho[j])] <- mean(fdr_lsl)
arr["power", "DOS-1", toString(rho[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(rho[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(rho[j])] <- mean(div(power_oracle, power_alpha))
arr["power", "oracle", toString(rho[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(rho[j])] <- mean(div(power_oracle, power_12))
arr["power", "ST-MED", toString(rho[j])] <- mean(div(power_oracle, power_med))
arr["power", "LSL", toString(rho[j])] <- mean(div(power_oracle, power_lsl))
}
mat_pi0 <- t(arr["pi0est", , ])
matplot(rho, mat_pi0, type = "b", xlab = expression(rho), pch = 1:7, col = seq_len(ncol(mat_pi0)), ylab = expression(hat(pi)[0]), main = "Average proportion estimates")
legend("topright", colnames(mat_pi0), col = seq_len(ncol(mat_pi0)), cex = 0.8, pch = 1:7)
mat_fdr <- t(arr["FDR", , ])
matplot(rho, mat_fdr, type = "b", xlab = expression(rho), pch = 1:7, col = seq_len(ncol(mat_fdr)), main = "FDR", ylab = "")
legend("topleft", colnames(mat_fdr), col = seq_len(ncol(mat_fdr)), cex = 0.8, pch = 1:7)
abline(h = alpha)
mat_power <- t(arr["power", , ])
matplot(rho, mat_power, type = "b", xlab = expression(rho), pch = 1:7, col = seq_len(ncol(mat_power)), main = "Relative power", ylab = "")
legend("topleft", colnames(mat_power), col = seq_len(ncol(mat_power)), cex = 0.8, pch = 1:7)
n <- 500
N <- 100
mu <- 3
pi0 <- 0.5 + 0.5 * (1:15-1) / 15
rho=0
alpha <- 0.05
arr <- array(data = rep(0, 3 * 8 * length(pi0)),
dim = c(3, 8, length(pi0)),
dimnames = list(c("pi0est", "FDR", "power"),
c("smoother", "bh", "DOS-1", "DOS-1/2", "oracle", "ST-alpha", "ST-MED", "ST-1/2"),
pi0))
div <- function(x, y) {
ifelse(y == 0, 1, x / y)
}
for (j in 1:length(pi0)) {
pi0est_smoother <- pi0est_bh <- pi0est_dos1 <- pi0est_dos12 <- pi0est_alpha <- pi0est_12 <- pi0est_med <- rep(0, N)
fdr_smoother <-  fdr_bh <- fdr_dos1 <- fdr_dos12 <- fdr_alpha <- fdr_oracle <- fdr_12 <- fdr_med <- rep(0, N)
power_smoother <- power_bh <- power_dos1 <- power_dos12 <- power_alpha <- power_oracle <- power_12 <- power_med <- rep(0, N)
stop_med <- stop_dos <- rep(0, N)
for (i in 1:N) {
if (rho > 0) {
eps <- sqrt(rho) * rnorm(1) + sqrt(1 - rho) * rnorm(n)
} else {
eps <- rnorm(n)
}
x <- eps + c(rep(0, floor(pi0[j] * n)), rep(mu, n - floor(n * pi0[j])))
sig <- c(rep(0, floor(pi0[j] * n)), rep(1, n - floor(pi0[j] * n)))
sig <- sig[order(1 - pnorm(x))]
p_seq <- sort(1 - pnorm(x))
pi0est_dos1[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1)$cp_loc], p_seq)$est
pi0est_dos12[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1/2)$cp_loc], p_seq)$est
pi0est_alpha[i] <- 1 - storey_pi1est(alpha, p_seq, mod = TRUE)$est
pi0est_12[i] <- 1 - storey_pi1est(1/2, p_seq, mod = TRUE)$est
pi0est_med[i] <- 1 - storey_pi1est(p_seq[n/2], p_seq, mod = TRUE)$est
pi0est_smoother[i] <- qvalue::pi0est(p_seq, pi0.method = "smoother")$pi0
pi0est_bh[i] <- fdrtool::pval.estimate.eta0(p_seq, method = "adaptive",
diagnostic.plot = FALSE)
stop_med[i] <- p_seq[n/2]
stop_dos[i] <- p_seq[dos_fun(p_seq)$cp_loc]
abh_bh <- bh_adaptive(p_seq, pi0est_bh[i], alpha, sig)
fdr_bh[i] <- abh_bh$fdr
power_bh[i] <- abh_bh$power
abh_smoother <- q_value_adaptive(p_seq, pi0est_smoother[i], alpha, sig)
fdr_smoother[i] <- abh_smoother$fdr
power_smoother[i] <- abh_smoother$power
abh_dos1 <- bh_adaptive(p_seq, pi0est_dos1[i], alpha, sig)
fdr_dos1[i] <- abh_dos1$fdr
power_dos1[i] <- abh_dos1$power
abh_dos12 <- bh_adaptive(p_seq, pi0est_dos12[i], alpha, sig)
fdr_dos12[i] <- abh_dos12$fdr
power_dos12[i] <- abh_dos12$power
abh_alpha <- bh_adaptive(p_seq, pi0est_alpha[i], alpha, sig)
fdr_alpha[i] <- abh_alpha$fdr
power_alpha[i] <- abh_alpha$power
abh_oracle <- bh_adaptive(p_seq, pi0[j], alpha, sig)
fdr_oracle[i] <- abh_oracle$fdr
power_oracle[i] <- abh_oracle$power
abh_12 <- bh_adaptive(p_seq, pi0est_12[i], alpha, sig)
fdr_12[i] <- abh_12$fdr
power_12[i] <- abh_12$power
abh_med <- bh_adaptive(p_seq, pi0est_med[i], alpha, sig)
fdr_med[i] <- abh_med$fdr
power_med[i] <- abh_med$power
}
arr["pi0est", "bh", toString(pi0[j])] <- mean(pi0est_bh)
arr["pi0est", "smoother", toString(pi0[j])] <- mean(pi0est_smoother)
arr["pi0est", "DOS-1", toString(pi0[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(pi0[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(pi0[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(pi0[j])] <- pi0[j]
arr["pi0est", "ST-1/2", toString(pi0[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(pi0[j])] <- mean(pi0est_med)
arr["FDR", "bh", toString(pi0[j])] <- mean(fdr_bh)
arr["FDR", "smoother", toString(pi0[j])] <- mean(fdr_smoother)
arr["FDR", "DOS-1", toString(pi0[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(pi0[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(pi0[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(pi0[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(pi0[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(pi0[j])] <- mean(fdr_med)
arr["power", "bh", toString(pi0[j])] <- mean(div(power_bh, power_oracle))
arr["power", "smoother", toString(pi0[j])] <- mean(div(power_smoother, power_oracle))
arr["power", "DOS-1", toString(pi0[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(pi0[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(pi0[j])] <- mean(div(power_alpha, power_oracle))
arr["power", "oracle", toString(pi0[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(pi0[j])] <- mean(div(power_12, power_oracle))
arr["power", "ST-MED", toString(pi0[j])] <- mean(div(power_med, power_oracle))
}
q_value_adaptive=function(p_seq, pi0, alpha, sig)
{
n <- length(p_seq)
res <- NULL
q_est=sum(qvalue(p_seq,fdr.level=alpha,pi0=pi0)$significant)
res$est <- q_est
if (q_est == 0) {
res$fdr <- 0
res$power <- 0
} else {
res$fdr <- sum(1 - sig[1:q_est]) / q_est
res$power <- sum(sig[1:q_est]) / sum(sig)
}
return(res)
}
n <- 500
N <- 100
mu <- 3
pi0 <- 0.5 + 0.5 * (1:15-1) / 15
rho=0
alpha <- 0.05
arr <- array(data = rep(0, 3 * 8 * length(pi0)),
dim = c(3, 8, length(pi0)),
dimnames = list(c("pi0est", "FDR", "power"),
c("smoother", "bh", "DOS-1", "DOS-1/2", "oracle", "ST-alpha", "ST-MED", "ST-1/2"),
pi0))
div <- function(x, y) {
ifelse(y == 0, 1, x / y)
}
for (j in 1:length(pi0)) {
pi0est_smoother <- pi0est_bh <- pi0est_dos1 <- pi0est_dos12 <- pi0est_alpha <- pi0est_12 <- pi0est_med <- rep(0, N)
fdr_smoother <-  fdr_bh <- fdr_dos1 <- fdr_dos12 <- fdr_alpha <- fdr_oracle <- fdr_12 <- fdr_med <- rep(0, N)
power_smoother <- power_bh <- power_dos1 <- power_dos12 <- power_alpha <- power_oracle <- power_12 <- power_med <- rep(0, N)
stop_med <- stop_dos <- rep(0, N)
for (i in 1:N) {
if (rho > 0) {
eps <- sqrt(rho) * rnorm(1) + sqrt(1 - rho) * rnorm(n)
} else {
eps <- rnorm(n)
}
x <- eps + c(rep(0, floor(pi0[j] * n)), rep(mu, n - floor(n * pi0[j])))
sig <- c(rep(0, floor(pi0[j] * n)), rep(1, n - floor(pi0[j] * n)))
sig <- sig[order(1 - pnorm(x))]
p_seq <- sort(1 - pnorm(x))
pi0est_dos1[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1)$cp_loc], p_seq)$est
pi0est_dos12[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1/2)$cp_loc], p_seq)$est
pi0est_alpha[i] <- 1 - storey_pi1est(alpha, p_seq, mod = TRUE)$est
pi0est_12[i] <- 1 - storey_pi1est(1/2, p_seq, mod = TRUE)$est
pi0est_med[i] <- 1 - storey_pi1est(p_seq[n/2], p_seq, mod = TRUE)$est
pi0est_smoother[i] <- qvalue::pi0est(p_seq, pi0.method = "smoother")$pi0
pi0est_bh[i] <- fdrtool::pval.estimate.eta0(p_seq, method = "adaptive",
diagnostic.plot = FALSE)
stop_med[i] <- p_seq[n/2]
stop_dos[i] <- p_seq[dos_fun(p_seq)$cp_loc]
abh_bh <- bh_adaptive(p_seq, pi0est_bh[i], alpha, sig)
fdr_bh[i] <- abh_bh$fdr
power_bh[i] <- abh_bh$power
abh_smoother <- q_value_adaptive(p_seq, pi0est_smoother[i], alpha, sig)
fdr_smoother[i] <- abh_smoother$fdr
power_smoother[i] <- abh_smoother$power
abh_dos1 <- bh_adaptive(p_seq, pi0est_dos1[i], alpha, sig)
fdr_dos1[i] <- abh_dos1$fdr
power_dos1[i] <- abh_dos1$power
abh_dos12 <- bh_adaptive(p_seq, pi0est_dos12[i], alpha, sig)
fdr_dos12[i] <- abh_dos12$fdr
power_dos12[i] <- abh_dos12$power
abh_alpha <- bh_adaptive(p_seq, pi0est_alpha[i], alpha, sig)
fdr_alpha[i] <- abh_alpha$fdr
power_alpha[i] <- abh_alpha$power
abh_oracle <- bh_adaptive(p_seq, pi0[j], alpha, sig)
fdr_oracle[i] <- abh_oracle$fdr
power_oracle[i] <- abh_oracle$power
abh_12 <- bh_adaptive(p_seq, pi0est_12[i], alpha, sig)
fdr_12[i] <- abh_12$fdr
power_12[i] <- abh_12$power
abh_med <- bh_adaptive(p_seq, pi0est_med[i], alpha, sig)
fdr_med[i] <- abh_med$fdr
power_med[i] <- abh_med$power
}
arr["pi0est", "bh", toString(pi0[j])] <- mean(pi0est_bh)
arr["pi0est", "smoother", toString(pi0[j])] <- mean(pi0est_smoother)
arr["pi0est", "DOS-1", toString(pi0[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(pi0[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(pi0[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(pi0[j])] <- pi0[j]
arr["pi0est", "ST-1/2", toString(pi0[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(pi0[j])] <- mean(pi0est_med)
arr["FDR", "bh", toString(pi0[j])] <- mean(fdr_bh)
arr["FDR", "smoother", toString(pi0[j])] <- mean(fdr_smoother)
arr["FDR", "DOS-1", toString(pi0[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(pi0[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(pi0[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(pi0[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(pi0[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(pi0[j])] <- mean(fdr_med)
arr["power", "bh", toString(pi0[j])] <- mean(div(power_bh, power_oracle))
arr["power", "smoother", toString(pi0[j])] <- mean(div(power_smoother, power_oracle))
arr["power", "DOS-1", toString(pi0[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(pi0[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(pi0[j])] <- mean(div(power_alpha, power_oracle))
arr["power", "oracle", toString(pi0[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(pi0[j])] <- mean(div(power_12, power_oracle))
arr["power", "ST-MED", toString(pi0[j])] <- mean(div(power_med, power_oracle))
}
mat_pi0 <- t(arr["pi0est", , ])
matplot(pi0, mat_pi0, type = "b", pch = 1:8, col = seq_len(ncol(mat_pi0)), ylab = expression(hat(pi)[0]), xlab= expression(pi[0]), main = "Average proportion estimates")
legend("bottomright", colnames(mat_pi0), col = seq_len(ncol(mat_pi0)), cex = 0.8, pch=1:8)
mat_fdr <- t(arr["FDR",, ])
matplot(pi0, mat_fdr, type = "b", pch = 1:8, col = seq_len(ncol(mat_fdr)), main = "FDR", ylab = "",  xlab= expression(pi[0]))
legend("topleft", colnames(mat_fdr), col = seq_len(ncol(mat_fdr)), cex = 0.8, pch = 1:8)
abline(h = alpha)
mat_power <- t(arr["power", , ])
matplot(pi0, mat_power, type = "b", pch = 1:8, col = seq_len(ncol(mat_power)), main = "Relative power", ylab = "", xlab= expression(pi[0]))
legend("topleft", colnames(mat_power), col = seq_len(ncol(mat_power)), cex = 0.8, pch = 1:8)
abline(h=1)
library(MTCP)
library(MTCP)
library(MTCP)
nb_an
#the second one is
nb_an=neuroblastoma$annotations
data(neuroblastoma)
library(MTCP)
bh_adaptive
library(MTCP)
library(MTCP)
n <- 100
N <- 10000
mu <- 3
pi0 <- 0.5 + 0.5 * (1:15-1) / 15
rho <- 0.2
alpha <- 0.05
arr <- array(data = rep(0, 3 * 7 * length(pi0)),
dim = c(3, 7, length(pi0)),
dimnames = list(c("pi0est", "FDR", "power"),
c("DOS-1", "DOS-1/2", "oracle", "ST-alpha", "ST-MED", "ST-1/2", "LSL"),
pi0))
div <- function(x, y) {
ifelse(y == 0, 1, x / y)
}
for (j in 1:length(pi0)) {
pi0est_dos1 <- pi0est_dos12 <- pi0est_alpha <- pi0est_12 <-  pi0est_lsl <-
pi0est_med <- rep(0, N)
fdr_dos1 <- fdr_dos12 <- fdr_alpha <- fdr_oracle <- fdr_12 <- fdr_med <- fdr_lsl <-   rep(0, N)
power_dos1 <- power_dos12 <- power_alpha <- power_oracle <- power_12 <- power_med <- power_lsl <-  rep(0, N)
for (i in 1:N) {
if (rho > 0) {
eps <- sqrt(rho) * rnorm(1) + sqrt(1 - rho) * rnorm(n)
} else {
eps <- rnorm(n)
}
x <- eps + c(rep(0, floor(pi0[j] * n)), rep(mu, n - floor(n * pi0[j])))
sig <- c(rep(0, floor(pi0[j] * n)), rep(1, n - floor(pi0[j] * n)))
sig <- sig[order(1 - pnorm(x))]
p_seq <- sort(1 - pnorm(x))
pi0est_dos1[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1)$cp_loc], p_seq)$est
pi0est_dos12[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1/2)$cp_loc], p_seq)$est
pi0est_alpha[i] <- 1 - storey_pi1est(alpha, p_seq, mod = TRUE)$est
pi0est_12[i] <- 1 - storey_pi1est(1/2, p_seq, mod = TRUE)$est
pi0est_med[i] <- 1 - storey_pi1est(p_seq[n/2], p_seq, mod = TRUE)$est
pi0est_lsl[i] <- fdrtool::pval.estimate.eta0(p_seq, method = "adaptive",
diagnostic.plot = FALSE)
abh_dos1 <- bh_adaptive(p_seq, pi0est_dos1[i], alpha, sig)
fdr_dos1[i] <- abh_dos1$fdr
power_dos1[i] <- abh_dos1$power
abh_dos12 <- bh_adaptive(p_seq, pi0est_dos12[i], alpha, sig)
fdr_dos12[i] <- abh_dos12$fdr
power_dos12[i] <- abh_dos12$power
abh_alpha <- bh_adaptive(p_seq, pi0est_alpha[i], alpha, sig)
fdr_alpha[i] <- abh_alpha$fdr
power_alpha[i] <- abh_alpha$power
abh_oracle <- bh_adaptive(p_seq, pi0[j], alpha, sig)
fdr_oracle[i] <- abh_oracle$fdr
power_oracle[i] <- abh_oracle$power
abh_12 <- bh_adaptive(p_seq, pi0est_12[i], alpha, sig)
fdr_12[i] <- abh_12$fdr
power_12[i] <- abh_12$power
abh_med <- bh_adaptive(p_seq, pi0est_med[i], alpha, sig)
fdr_med[i] <- abh_med$fdr
power_med[i] <- abh_med$power
abh_lsl <- bh_adaptive(p_seq, pi0est_lsl[i], alpha, sig)
fdr_lsl[i] <- abh_lsl$fdr
power_lsl[i] <- abh_lsl$power
}
arr["pi0est", "DOS-1", toString(pi0[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(pi0[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(pi0[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(pi0[j])] <- pi0[j]
arr["pi0est", "ST-1/2", toString(pi0[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(pi0[j])] <- mean(pi0est_med)
arr["pi0est", "LSL", toString(pi0[j])] <- mean(pi0est_lsl)
arr["FDR", "DOS-1", toString(pi0[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(pi0[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(pi0[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(pi0[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(pi0[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(pi0[j])] <- mean(fdr_med)
arr["FDR", "LSL", toString(pi0[j])] <- mean(fdr_lsl)
arr["power", "DOS-1", toString(pi0[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(pi0[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(pi0[j])] <- mean(div(power_alpha, power_oracle))
arr["power", "oracle", toString(pi0[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(pi0[j])] <- mean(div(power_12, power_oracle))
arr["power", "ST-MED", toString(pi0[j])] <- mean(div(power_med, power_oracle))
arr["power", "LSL", toString(pi0[j])] <- mean(div(power_lsl, power_oracle))
}
n <- 100
N <- 10000
mu <- 3
pi0 <- 0.5 + 0.5 * (1:15-1) / 15
rho <- 0.2
alpha <- 0.05
arr <- array(data = rep(0, 3 * 7 * length(pi0)),
dim = c(3, 7, length(pi0)),
dimnames = list(c("pi0est", "FDR", "power"),
c("DOS-1", "DOS-1/2", "oracle", "ST-alpha", "ST-MED", "ST-1/2", "LSL"),
pi0))
div <- function(x, y) {
ifelse(y == 0, 1, x / y)
}
for (j in 1:length(pi0)) {
pi0est_dos1 <- pi0est_dos12 <- pi0est_alpha <- pi0est_12 <-  pi0est_lsl <-
pi0est_med <- rep(0, N)
fdr_dos1 <- fdr_dos12 <- fdr_alpha <- fdr_oracle <- fdr_12 <- fdr_med <- fdr_lsl <-   rep(0, N)
power_dos1 <- power_dos12 <- power_alpha <- power_oracle <- power_12 <- power_med <- power_lsl <-  rep(0, N)
for (i in 1:N) {
if (rho > 0) {
eps <- sqrt(rho) * rnorm(1) + sqrt(1 - rho) * rnorm(n)
} else {
eps <- rnorm(n)
}
x <- eps + c(rep(0, floor(pi0[j] * n)), rep(mu, n - floor(n * pi0[j])))
sig <- c(rep(0, floor(pi0[j] * n)), rep(1, n - floor(pi0[j] * n)))
sig <- sig[order(1 - pnorm(x))]
p_seq <- sort(1 - pnorm(x))
pi0est_dos1[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1)$cp_loc], p_seq)$est
pi0est_dos12[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1/2)$cp_loc], p_seq)$est
pi0est_alpha[i] <- 1 - storey_pi1est(alpha, p_seq, mod = TRUE)$est
pi0est_12[i] <- 1 - storey_pi1est(1/2, p_seq, mod = TRUE)$est
pi0est_med[i] <- 1 - storey_pi1est(p_seq[n/2], p_seq, mod = TRUE)$est
pi0est_lsl[i] <- fdrtool::pval.estimate.eta0(p_seq, method = "adaptive",
diagnostic.plot = FALSE)
abh_dos1 <- bh_adaptive(p_seq, pi0est_dos1[i], alpha, sig)
fdr_dos1[i] <- abh_dos1$fdr
power_dos1[i] <- abh_dos1$power
abh_dos12 <- bh_adaptive(p_seq, pi0est_dos12[i], alpha, sig)
fdr_dos12[i] <- abh_dos12$fdr
power_dos12[i] <- abh_dos12$power
abh_alpha <- bh_adaptive(p_seq, pi0est_alpha[i], alpha, sig)
fdr_alpha[i] <- abh_alpha$fdr
power_alpha[i] <- abh_alpha$power
abh_oracle <- bh_adaptive(p_seq, pi0[j], alpha, sig)
fdr_oracle[i] <- abh_oracle$fdr
power_oracle[i] <- abh_oracle$power
abh_12 <- bh_adaptive(p_seq, pi0est_12[i], alpha, sig)
fdr_12[i] <- abh_12$fdr
power_12[i] <- abh_12$power
abh_med <- bh_adaptive(p_seq, pi0est_med[i], alpha, sig)
fdr_med[i] <- abh_med$fdr
power_med[i] <- abh_med$power
abh_lsl <- bh_adaptive(p_seq, pi0est_lsl[i], alpha, sig)
fdr_lsl[i] <- abh_lsl$fdr
power_lsl[i] <- abh_lsl$power
}
arr["pi0est", "DOS-1", toString(pi0[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(pi0[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(pi0[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(pi0[j])] <- pi0[j]
arr["pi0est", "ST-1/2", toString(pi0[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(pi0[j])] <- mean(pi0est_med)
arr["pi0est", "LSL", toString(pi0[j])] <- mean(pi0est_lsl)
arr["FDR", "DOS-1", toString(pi0[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(pi0[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(pi0[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(pi0[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(pi0[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(pi0[j])] <- mean(fdr_med)
arr["FDR", "LSL", toString(pi0[j])] <- mean(fdr_lsl)
arr["power", "DOS-1", toString(pi0[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(pi0[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(pi0[j])] <- mean(div(power_alpha, power_oracle))
arr["power", "oracle", toString(pi0[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(pi0[j])] <- mean(div(power_12, power_oracle))
arr["power", "ST-MED", toString(pi0[j])] <- mean(div(power_med, power_oracle))
arr["power", "LSL", toString(pi0[j])] <- mean(div(power_lsl, power_oracle))
}
mat_pi0 <- t(arr["pi0est", , ])
matplot(pi0, mat_pi0, type = "b", pch = 1:7, col = seq_len(ncol(mat_pi0)), ylab = expression(hat(pi)[0]), xlab= expression(pi[0]), main = "Average proportion estimates")
legend("bottomright", colnames(mat_pi0), col = seq_len(ncol(mat_pi0)), cex = 0.8, pch=1:7)
mat_fdr <- t(arr["FDR", , ])
matplot(pi0, mat_fdr, type = "b", pch = 1:7, col = seq_len(ncol(mat_pi0)), main = "FDR", ylab = "",  xlab= expression(pi[0]))
legend("topleft", colnames(mat_fdr), col = seq_len(ncol(mat_fdr)), cex = 0.8, pch = 1:7)
abline(h = alpha)
mat_power <- t(arr["power", , ])
matplot(pi0, mat_power, type = "b", pch = 1:7, col = seq_len(ncol(mat_power)), main = "Relative power", ylab = "", xlab= expression(pi[0]))
legend("topleft", colnames(mat_power), col = seq_len(ncol(mat_power)), cex = 0.8, pch = 1:7)
n <- 100
N <- 10000
mu <- 3
pi0 <- 0.5 + 0.5 * (1:15-1) / 15
rho <- 0
alpha <- 0.05
arr <- array(data = rep(0, 3 * 7 * length(pi0)),
dim = c(3, 7, length(pi0)),
dimnames = list(c("pi0est", "FDR", "power"),
c("DOS-1", "DOS-1/2", "oracle", "ST-alpha", "ST-MED", "ST-1/2", "LSL"),
pi0))
div <- function(x, y) {
ifelse(y == 0, 1, x / y)
}
for (j in 1:length(pi0)) {
pi0est_dos1 <- pi0est_dos12 <- pi0est_alpha <- pi0est_12 <-  pi0est_lsl <-
pi0est_med <- rep(0, N)
fdr_dos1 <- fdr_dos12 <- fdr_alpha <- fdr_oracle <- fdr_12 <- fdr_med <- fdr_lsl <-   rep(0, N)
power_dos1 <- power_dos12 <- power_alpha <- power_oracle <- power_12 <- power_med <- power_lsl <-  rep(0, N)
for (i in 1:N) {
if (rho > 0) {
eps <- sqrt(rho) * rnorm(1) + sqrt(1 - rho) * rnorm(n)
} else {
eps <- rnorm(n)
}
x <- eps + c(rep(0, floor(pi0[j] * n)), rep(mu, n - floor(n * pi0[j])))
sig <- c(rep(0, floor(pi0[j] * n)), rep(1, n - floor(pi0[j] * n)))
sig <- sig[order(1 - pnorm(x))]
p_seq <- sort(1 - pnorm(x))
pi0est_dos1[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1)$cp_loc], p_seq)$est
pi0est_dos12[i] <- 1 - storey_pi1est(p_seq[dos_fun(p_seq, alpha = 1/2)$cp_loc], p_seq)$est
pi0est_alpha[i] <- 1 - storey_pi1est(alpha, p_seq, mod = TRUE)$est
pi0est_12[i] <- 1 - storey_pi1est(1/2, p_seq, mod = TRUE)$est
pi0est_med[i] <- 1 - storey_pi1est(p_seq[n/2], p_seq, mod = TRUE)$est
pi0est_lsl[i] <- fdrtool::pval.estimate.eta0(p_seq, method = "adaptive",
diagnostic.plot = FALSE)
abh_dos1 <- bh_adaptive(p_seq, pi0est_dos1[i], alpha, sig)
fdr_dos1[i] <- abh_dos1$fdr
power_dos1[i] <- abh_dos1$power
abh_dos12 <- bh_adaptive(p_seq, pi0est_dos12[i], alpha, sig)
fdr_dos12[i] <- abh_dos12$fdr
power_dos12[i] <- abh_dos12$power
abh_alpha <- bh_adaptive(p_seq, pi0est_alpha[i], alpha, sig)
fdr_alpha[i] <- abh_alpha$fdr
power_alpha[i] <- abh_alpha$power
abh_oracle <- bh_adaptive(p_seq, pi0[j], alpha, sig)
fdr_oracle[i] <- abh_oracle$fdr
power_oracle[i] <- abh_oracle$power
abh_12 <- bh_adaptive(p_seq, pi0est_12[i], alpha, sig)
fdr_12[i] <- abh_12$fdr
power_12[i] <- abh_12$power
abh_med <- bh_adaptive(p_seq, pi0est_med[i], alpha, sig)
fdr_med[i] <- abh_med$fdr
power_med[i] <- abh_med$power
abh_lsl <- bh_adaptive(p_seq, pi0est_lsl[i], alpha, sig)
fdr_lsl[i] <- abh_lsl$fdr
power_lsl[i] <- abh_lsl$power
}
arr["pi0est", "DOS-1", toString(pi0[j])] <- mean(pi0est_dos1)
arr["pi0est", "DOS-1/2", toString(pi0[j])] <- mean(pi0est_dos12)
arr["pi0est", "ST-alpha", toString(pi0[j])] <- mean(pi0est_alpha)
arr["pi0est", "oracle", toString(pi0[j])] <- pi0[j]
arr["pi0est", "ST-1/2", toString(pi0[j])] <- mean(pi0est_12)
arr["pi0est", "ST-MED", toString(pi0[j])] <- mean(pi0est_med)
arr["pi0est", "LSL", toString(pi0[j])] <- mean(pi0est_lsl)
arr["FDR", "DOS-1", toString(pi0[j])] <- mean(fdr_dos1)
arr["FDR", "DOS-1/2", toString(pi0[j])] <- mean(fdr_dos12)
arr["FDR", "ST-alpha", toString(pi0[j])] <- mean(fdr_alpha)
arr["FDR", "oracle", toString(pi0[j])] <- mean(fdr_oracle)
arr["FDR", "ST-1/2", toString(pi0[j])] <- mean(fdr_12)
arr["FDR", "ST-MED", toString(pi0[j])] <- mean(fdr_med)
arr["FDR", "LSL", toString(pi0[j])] <- mean(fdr_lsl)
arr["power", "DOS-1", toString(pi0[j])] <- mean(div(power_dos1, power_oracle))
arr["power", "DOS-1/2", toString(pi0[j])] <- mean(div(power_dos12, power_oracle))
arr["power", "ST-alpha", toString(pi0[j])] <- mean(div(power_alpha, power_oracle))
arr["power", "oracle", toString(pi0[j])] <- mean(div(power_oracle, power_oracle))
arr["power", "ST-1/2", toString(pi0[j])] <- mean(div(power_12, power_oracle))
arr["power", "ST-MED", toString(pi0[j])] <- mean(div(power_med, power_oracle))
arr["power", "LSL", toString(pi0[j])] <- mean(div(power_lsl, power_oracle))
}
mat_pi0 <- t(arr["pi0est", , ])
matplot(pi0, mat_pi0, type = "b", pch = 1:7, col = seq_len(ncol(mat_pi0)), ylab = expression(hat(pi)[0]), xlab= expression(pi[0]), main = "Average proportion estimates")
legend("bottomright", colnames(mat_pi0), col = seq_len(ncol(mat_pi0)), cex = 0.8, pch=1:7)
mat_fdr <- t(arr["FDR", , ])
matplot(pi0, mat_fdr, type = "b", pch = 1:7, col = seq_len(ncol(mat_pi0)), main = "FDR", ylab = "",  xlab= expression(pi[0]))
legend("topleft", colnames(mat_fdr), col = seq_len(ncol(mat_fdr)), cex = 0.8, pch = 1:7)
abline(h = alpha)
mat_power <- t(arr["power", , ])
matplot(pi0, mat_power, type = "b", pch = 1:7, col = seq_len(ncol(mat_power)), main = "Relative power", ylab = "", xlab= expression(pi[0]))
legend("topleft", colnames(mat_power), col = seq_len(ncol(mat_power)), cex = 0.8, pch = 1:7)
